package dp.Singleton;

public class SingletonDesignPattern {
	/**
	 * -------------------------------------------------------------
	 * Singleton design pattern
	 * -------------------------------------------------------------
	 * Singleton class is designed to have only one object at a time.
	 * After first time, if try to instantiate the singleton class it will also refer to the first instance created.
	 * Used synchronized with the block to make multiple threads cannot access at a time. 
	 */
	
	int Id;
	
	private SingletonDesignPattern() {
		System.out.println("This is singleton.");
	}
	
	static SingletonDesignPattern instance;
	
	public static SingletonDesignPattern createSingletonObject() {
		
		synchronized (SingletonDesignPattern.class) {
			if(instance==null) {
				instance = new SingletonDesignPattern();
			}
		}
		
		
		return instance;
	}

	public static void main(String[] args) {
		
		//since the constructor is private cannot access and create the instance
		
		SingletonDesignPattern singleton = SingletonDesignPattern.createSingletonObject();
		System.out.println(singleton);
		
		SingletonDesignPattern singleton1 = SingletonDesignPattern.createSingletonObject();
		System.out.println(singleton1);
		
		SingletonDesignPattern singleton2 = SingletonDesignPattern.createSingletonObject();
		System.out.println(singleton2);

	}

}
